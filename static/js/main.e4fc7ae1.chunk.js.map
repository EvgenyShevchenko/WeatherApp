{"version":3,"sources":["components/Modal/Modal.tsx","components/FavoriteCard/FavoriteCard.tsx","api/api.ts","api/weather.tsx","components/FavoriteWeather/FavoriteWeather.tsx","components/ChangeMode/ChangeMode.tsx","components/SavedCity/SavedCity.tsx","components/SearchCity/SearchCity.tsx","App.tsx","index.tsx"],"names":["Modal","weather","city","active","setActive","error","useEffect","handleKeyPress","e","keyCode","document","addEventListener","removeEventListener","handlerModalClose","weatherData","temp","feels_like","humidity","pressure","className","onClick","Math","floor","cashedData","localStorage","getItem","includes","setItem","addFavorite","FavoriteCard","data","cityName","apiClient","axios","create","baseURL","getWeather","a","get","response","console","log","FavoriteWeather","favoriteCity","useState","resFavorite","setResFavorite","request","map","Promise","all","then","responses","length","obj","i","main","name","ChangeMode","toggleChangeMode","checkedA","checkedB","state","setState","Switch","checked","onChange","event","target","handleChange","inputProps","SavedCity","setData","savedCity","require","SearchCity","setCity","setWeather","modalActive","setModalActive","setFavoriteCity","changeMode","setChangeMode","cityRes","setCityRes","setError","favoriteCities","citiesArr","slice","split","type","value","onKeyPress","key","res","blur","searchWeather","placeholder","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4fc7ae1.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\n\ninterface ModalProps {\n    weather: any\n    city: string\n    active: boolean\n    setActive: (arg: boolean) => void\n    error: boolean\n}\n\nconst Modal: React.FC<ModalProps> = (\n    {\n        weather,\n        city,\n        active,\n        setActive,\n        error\n    }) => {\n\n    const addFavorite = () => {\n        const cashedData = localStorage.getItem('favorite') || ''\n        if (!cashedData.includes(city)) {\n            localStorage.setItem(\"favorite\", cashedData + ' ' + city)\n        }\n    }\n\n    useEffect(() => {\n        const handleKeyPress = (e: any) => {\n            if (e.keyCode === 27) {\n                setActive(false)\n            }\n        }\n\n        document.addEventListener('keydown', (e) => handleKeyPress(e))\n        return () => document.removeEventListener('keypress', (e) => handleKeyPress(e))\n\n    }, [])\n\n    const handlerModalClose = () => {\n        setActive(false)\n    }\n\n    const weatherData = {\n        temp: weather.temp,\n        feels_like: weather.feels_like,\n        humidity: weather.humidity,\n        pressure: weather.pressure\n    }\n\n    const {temp, feels_like, humidity, pressure} = weatherData;\n\n    return (\n        <div>\n            {error ? <div className=\"modal__error\">\"Ошибка запроса\"</div> :\n                <div className={active ? \"modal active\" : \"modal\"} onClick={handlerModalClose}>\n                    <div className=\"modal__content\">\n                        <div className=\"modal__content-close\" onClick={handlerModalClose}>x</div>\n                        <h2 className=\"modal__title\">{city}</h2>\n                        <div className=\"modal__text\">\n                            <div className=\"modal__content-temp\"><p>Температура</p><b>{Math.floor(temp)}&#8451;</b>\n                            </div>\n                            <div className=\"modal__content-feels\"><p>Ощущается как</p>\n                                <b>{Math.floor(feels_like)}&#8451;</b></div>\n                            <div className=\"modal__content-humidity\"><p>Влажность</p><b>{humidity}%</b></div>\n                            <div className=\"modal__content-pressure\"><p>Давление</p><b>{pressure}</b></div>\n                        </div>\n                        <div className=\"modal__add\" onClick={() => addFavorite()}>Добавить в избранное</div>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Modal;","interface FavoriteCardProps {\n    data: any\n    cityName: string\n}\n\nconst FavoriteCard: React.FC<FavoriteCardProps> = ({data, cityName}) => {\n\n    return (\n        <div className=\"favoriteCard\">\n            <h3 className=\"favoriteCard__title\">{cityName}</h3>\n            <div className=\"favoriteCard__temp\">\n                <b>{Math.floor(data.temp)}&#8451;</b>\n            </div>\n            <div className=\"favoriteCard__content-feels\">\n                <p>Feels_like: </p><b>{Math.floor(data.feels_like)}&#8451;</b>\n            </div>\n            <div className=\"favoriteCard__content-humidity\">\n                <p>Humidity: </p><b>{data.humidity}%</b>\n            </div>\n            <div className=\"favoriteCard__content-pressure\">\n                <p>Pressure: </p><b>{data.pressure}</b>\n            </div>\n        </div>\n    )\n}\n\nexport default FavoriteCard;","import axios from \"axios\";\n\nconst apiClient = axios.create({\n    baseURL: `https://api.openweathermap.org/data/2.5/`\n})\n\nexport default apiClient","import apiClient from \"./api\";\n\nconst getWeather = async (city: string) => {\n    const apiKey = \"432e0e516b136001af816e0e90e80ca2\"\n    try {\n        const response = await apiClient.get(\n            `weather?q=${city}&units=metric&appid=${apiKey}`\n        )\n        return response.data\n    } catch (error) {\n        console.log('error')\n    }\n}\nexport default getWeather","import React, {useState, useEffect} from \"react\";\nimport FavoriteCard from \"../FavoriteCard/FavoriteCard\";\nimport getWeather from \"../../api/weather\";\n\ninterface FavoriteWeatherProps {\n    favoriteCity: string[]\n}\n\ntype ResFavoriteState = {\n    main: any,\n    name: string\n}[]\n\nconst FavoriteWeather: React.FC<FavoriteWeatherProps> = ({favoriteCity}) => {\n\n    const [resFavorite, setResFavorite] = useState<ResFavoriteState>([]);\n\n    useEffect(() => {\n        if (favoriteCity) {\n            let request = favoriteCity\n                .map((city) => getWeather(city)\n                )\n            Promise.all(request)\n                .then((responses) => {\n                    setResFavorite(responses)\n                })\n        }\n    }, [favoriteCity])\n\n    return (\n        <div className=\"favoriteWeather\">\n            {resFavorite.length !== 0\n                ? resFavorite.map((obj, i) => {\n                        return (\n                            <FavoriteCard key={i}\n                                          data={obj.main}\n                                          cityName={obj.name}\n                            />\n                        )\n                    }\n                ) : <div className=\"favoriteWeather__noData\">Данные загружаются из избранного...</div>\n            }\n        </div>\n    )\n}\n\nexport default FavoriteWeather;\n","import React, {useState} from \"react\";\nimport Switch from '@material-ui/core/Switch';\n\ninterface ChangeModeProps {\n    toggleChangeMode: () => void\n}\n\nconst ChangeMode: React.FC<ChangeModeProps> = ({toggleChangeMode}) => {\n    const [state, setState] = useState({\n        checkedA: true,\n        checkedB: true,\n    });\n\n    const handleChange = (event: React.ChangeEvent<any>) => {\n        setState({...state, [event.target.name]: event.target.checked});\n        toggleChangeMode()\n    };\n\n    return (\n        <div className=\"changeMode\">Change mode:\n            <Switch\n                checked={state.checkedA}\n                onChange={(event: React.ChangeEvent<any>) => handleChange(event)}\n                name=\"checkedA\"\n                inputProps={{'aria-label': 'secondary checkbox'}}\n            />\n        </div>\n    );\n}\n\nexport default ChangeMode;\n","import FavoriteCard from \"../FavoriteCard/FavoriteCard\";\nimport {useEffect, useState} from \"react\";\nimport getWeather from \"../../api/weather\";\n\n\ninterface FavoriteCardProps {\n    main: {\n        feels_like: number\n        humidity: number\n        pressure: number\n        temp: number\n    }\n    name: string\n}\n\nconst SavedCity: React.FC = () => {\n    const [data, setData] = useState([])\n    const savedCity = require('../savedcities.json')\n\n    useEffect(() => {\n        if (savedCity) {\n            let request = savedCity\n                .map((city: string) => getWeather(city)\n                )\n            Promise.all(request)\n                .then((responses: any) => {\n                    setData(responses)\n                })\n        }\n    }, [])\n\n    return (\n        <div className=\"favoriteWeather\">\n            {data.map((obj: FavoriteCardProps, i) =>\n                <FavoriteCard key={i}\n                              data={obj.main}\n                              cityName={obj.name}/>\n            )\n            }\n        </div>\n    )\n}\n\nexport default SavedCity;","import {useState, useEffect} from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport FavoriteWeather from \"../FavoriteWeather/FavoriteWeather\";\nimport ChangeMode from \"../ChangeMode/ChangeMode\";\nimport SavedCity from \"../SavedCity/SavedCity\";\nimport getWeather from \"../../api/weather\";\n\nconst SearchCity: React.FC = () => {\n\n    const [city, setCity] = useState(\"\")\n    const [weather, setWeather] = useState({})\n    const [modalActive, setModalActive] = useState(false)\n    const [favoriteCity, setFavoriteCity] = useState<string[] | string>([])\n    const [changeMode, setChangeMode] = useState(true)\n    const [cityRes, setCityRes] = useState(\"\")\n    const [error, setError] = useState(false)\n    const favoriteCities = localStorage.getItem('favorite')\n    const citiesArr = favoriteCities ? favoriteCities.slice(1).split(' ') : \"\"\n\n    useEffect(() => {\n        setFavoriteCity(citiesArr)\n    }, [])\n\n    const searchWeather = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            getWeather(city)\n                .then(res => {\n                        if (res) {\n                            setWeather(res.main)\n                            setCityRes(res.name)\n                        } else {\n                            setError(true)\n                        }\n                    }\n                )\n            setModalActive(true);\n            (e.target as HTMLInputElement).blur()\n        }\n    }\n\n    const toggleChangeMode = () => {\n        setChangeMode(!changeMode);\n    };\n\n    return (\n        <div className=\"search-wrapper\">\n            <span className=\"search-label\">\n               Search City\n            </span>\n            <ChangeMode toggleChangeMode={toggleChangeMode}/>\n            <input type=\"text\" className=\"search-input\"\n                   value={city}\n                   onChange={(e) => setCity(e.target.value)}\n                   onKeyPress={(e) => searchWeather(e)}\n                   placeholder='Enter the city. Example: London'/>\n            <Modal\n                weather={weather}\n                active={modalActive}\n                setActive={setModalActive}\n                city={cityRes}\n                error={error}\n            />\n            {changeMode ?\n                <FavoriteWeather favoriteCity={favoriteCity as string[]}/>\n                :\n                <SavedCity/>\n            }\n        </div>\n    )\n}\n\nexport default SearchCity;","import SearchCity from \"./components/SearchCity/SearchCity\";\nimport './scss/app.scss';\n\nfunction App() {\n\n    return (\n        <div className=\"wrapper\">\n            <h1 className=\"title\">\n                Weather App\n            </h1>\n            <SearchCity/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/app.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}